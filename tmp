#!/usr/bin/python

import xml.etree.ElementTree as ET
import sys

def usage(argv):
  if len(argv) != :
    print "Error: \n    Usage: " + argv[] + " anvil_file\n"
    sys.exit()

def extractActorTranscriptions( tree, actorType ):
  # search in the anvil file for the body
  root = tree.getroot()
  for child in root:
    # when we have found the body, interrogate it
    if child.tag == "body":
      # read each element one at a time
      for elements in child.iter('el'):
        # assume no transcription found yet
        transcriptionFound = False
        # examine each element looking for a transcription associated with WIZARD_TYPE
        for attribute in elements.iter('attribute'):
          if ( attribute.attrib['name'] == 'type' ):
            if ( attribute.text == actorType ):
              transcriptionFound = True
  
        if transcriptionFound == True:
          # examine each element looking for a transcription associated with WIZARD_TYPE
          for attribute in elements.iter('attribute'):
            if ( attribute.attrib['name'] == 'transcription' ):
              print attribute.text

def orderedActorTranscriptions( tree ):
  # search in the anvil file for the body
  root = tree.getroot()
  for child in root:
    # when we have found the body, interrogate it
    if child.tag == "body":
      # read each element one at a time
      for elements in child.iter('el'):
        # assume no transcription found yet
        transcriptionFound = False
        # examine each element looking for a transcription associated with WIZARD_TYPE
        for attribute in elements.iter('attribute'):
          if ( attribute.attrib['name'] == 'type' ):
            if ( attribute.text == 'WIZARD_TALKING' ) or ( attribute.text == 'TYPIST_TYPING' ):
              transcriptionFound = True
  
        if transcriptionFound == True:
          # examine each element looking for a transcription associated with WIZARD_TYPE
          for attribute in elements.iter('attribute'):
            if ( attribute.attrib['name'] == 'transcription' ):
              print attribute.text

if __name__ == "__main__":
  usage(sys.argv)
  tree = ET.parse(sys.argv[])

  extractActorTranscriptions( tree, 'WIZARD_TALKING' )
  #extractActorTranscriptions( tree, 'TYPIST_TYPING' )

  #orderedActorTranscriptions(tree)
