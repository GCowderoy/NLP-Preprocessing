#!/usr/bin/python

from optparse import OptionParser
import re
import os 

# Returns the contents of a file as a string
def load_file_contents(fname):
    # Open the file, read the contents and close the file
    f = open(fname, "r")        
    fcontents = f.read()
    f.close()

    return fcontents

# Loads a file containing the words to be found in each
# document. Returns a list of words.
def load_word_list(fname):
    # Load the file
    tmp = load_file_contents(fname)

    # Split the contents of the file on a newline
    # and return the result as an array
    return [x for x in tmp.split("\n") if x]

# Replace each instance of a word from "words" in "doc" with the
# string "replacement". Returns the document with replacements.
def replace(doc, words, replacement):
    # Iterate over each word in the file
    for i in words:
        # Compile our regular expression and run it
        # over the document
        regex = re.compile("\\b"+re.escape(i) + "\\b", re.IGNORECASE) 
        doc = regex.sub(replacement, doc)     

    return doc

# Replaces the extension of a file with the extension ".out"
def gen_outfile_name(fname):
    # Split the root from the extension and return root with
    # the new extension
    (root, ext) = os.path.splitext(fname)
    return root + ".out"

if __name__== "__main__":

    # Generate our options parser
    parser = OptionParser()
    parser.add_option("-w", 
                      "--words", 
                      dest="w", 
                      help="The list of words to be replaced", 
                      metavar="FILE")

    parser.add_option("-r", 
                      "--replacement", 
                      dest="r", 
                      help="The string with which each term will be replaced", 
                      type="string", 
                      default="[landmark]")

    # Parse command line options
    (options, args) = parser.parse_args()

    # Load our list of words to be replaced
    words = load_word_list(options.w)
    # Replace instances of words in each document
    for doc in args:
        print "Replacing contents of " + doc
        result = replace(load_file_contents(doc), words, options.r)
        out = gen_outfile_name(doc)
        # Write the result of the replacement to file
        with open(out, "w") as f:
            print "Writing result to " + out
            f.write(result)

    print "Done"
